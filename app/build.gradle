apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId "atanasov.me.gradledemo"
        minSdkVersion 18
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        releaseConsolePrompt {
            //these values are going to be populated by our console prompt
            storeFile file("keystore.jks")
            storePassword ''
            keyAlias ''
            keyPassword ''
        }
        releaseStoredCredentials {
            // store the credentials directly in build.gradle
            // probably not a very good idea
            storeFile file("keystore.jks")
            storePassword 'demo1234'
            keyAlias 'demo'
            keyPassword 'demo1234'
        }
        releaseExternalCredentialsFile {
            storeFile null
            storePassword ''
            keyAlias ''
            keyPassword ''
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        releaseStoredCredentials {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // specify the keystore configuration
            signingConfig signingConfigs.releaseStoredCredentials
        }
        releaseConsolePrompt {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // specify the keystore configuration
            signingConfig signingConfigs.releaseConsolePrompt
        }
        releaseExternalCredentials {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // specify the keystore configuration
            signingConfig signingConfigs.releaseExternalCredentialsFile
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // add a debug suffix to applicationId
            applicationIdSuffix '.debug'
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        // Only execute when we are trying to assemble a release build with command prompt
        if (taskGraph.hasTask(':app:assembleReleaseConsolePrompt')) {
            def password = ''
            def alias = ''
            def aliasPassword = ''

            // gradle will ask us for credentials
            // System.console() can be null
            def console = System.console()
            if (console != null) {
                // readPassword returns a char[] so we need to wrap it into a string, because that's
                // most likely what you need
                password = new String(console.readPassword("\n\$ Enter keystore password: "))
                alias = new String(console.readLine("\n\$ Enter key alias: "))
                aliasPassword = new String(console.readPassword("\n\$ Enter key password: "))
            }

            // set the captured credentials to the signingConfig
            signingConfigs.releaseConsolePrompt.storePassword = password
            signingConfigs.releaseConsolePrompt.keyAlias = alias
            signingConfigs.releaseConsolePrompt.keyPassword = aliasPassword
        }

        // Only execute when we are trying to assemble a release build with external credentials file
        if (taskGraph.hasTask(':app:releaseExternalCredentials')) {
            // extract credentials from a file outside the project
            // file structure:
            //    keystore=/path/to/keystore
            //    keystore.password=demo1234
            //    keystore.alias=demo
            //    keystore.aliasPassword=demo1234
            if (project.hasProperty("GradleDemo.properties")
                    && new File(project.property("GradleDemo.properties")).exists()) {

                Properties props = new Properties()
                props.load(new FileInputStream(file(project.property("GradleDemo.properties"))))

                signingConfigs.releaseExternalCredentialsFile.storeFile = file(props['keystore'])
                signingConfigs.releaseExternalCredentialsFile.storePassword = props['password']
                signingConfigs.releaseExternalCredentialsFile.keyAlias = file(props['alias'])
                signingConfigs.releaseExternalCredentialsFile.keyPassword = file(props['aliasPassword'])

            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
}
